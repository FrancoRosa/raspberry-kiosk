[{"/home/fx/Upwork/raspberry-kiosk/src/index.js":"1","/home/fx/Upwork/raspberry-kiosk/src/components/App.js":"2","/home/fx/Upwork/raspberry-kiosk/src/components/Home.jsx":"3","/home/fx/Upwork/raspberry-kiosk/src/components/Video.jsx":"4","/home/fx/Upwork/raspberry-kiosk/src/components/Pdf.jsx":"5","/home/fx/Upwork/raspberry-kiosk/src/components/Figure.jsx":"6","/home/fx/Upwork/raspberry-kiosk/src/js/useKey.js":"7","/home/fx/Upwork/raspberry-kiosk/src/components/Icon.jsx":"8","/home/fx/Upwork/raspberry-kiosk/src/components/List.jsx":"9","/home/fx/Upwork/raspberry-kiosk/src/components/ListItem.jsx":"10"},{"size":274,"mtime":1608160264052,"results":"11","hashOfConfig":"12"},{"size":680,"mtime":1608318077138,"results":"13","hashOfConfig":"12"},{"size":762,"mtime":1608311317922,"results":"14","hashOfConfig":"12"},{"size":507,"mtime":1608348936376,"results":"15","hashOfConfig":"12"},{"size":1961,"mtime":1608348915539,"results":"16","hashOfConfig":"12"},{"size":392,"mtime":1608348927568,"results":"17","hashOfConfig":"12"},{"size":470,"mtime":1608230066883,"results":"18","hashOfConfig":"12"},{"size":609,"mtime":1608319589005,"results":"19","hashOfConfig":"12"},{"size":1516,"mtime":1608521018506,"results":"20","hashOfConfig":"12"},{"size":300,"mtime":1608349078854,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"bzdta9",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/fx/Upwork/raspberry-kiosk/src/index.js",[],["44","45"],"/home/fx/Upwork/raspberry-kiosk/src/components/App.js",[],"/home/fx/Upwork/raspberry-kiosk/src/components/Home.jsx",[],"/home/fx/Upwork/raspberry-kiosk/src/components/Video.jsx",[],"/home/fx/Upwork/raspberry-kiosk/src/components/Pdf.jsx",[],"/home/fx/Upwork/raspberry-kiosk/src/components/Figure.jsx",[],"/home/fx/Upwork/raspberry-kiosk/src/js/useKey.js",[],"/home/fx/Upwork/raspberry-kiosk/src/components/Icon.jsx",[],"/home/fx/Upwork/raspberry-kiosk/src/components/List.jsx",["46","47","48"],"import React, { useState, useEffect } from 'react';\nimport useKey from '../js/useKey';\nimport ListItem from './ListItem';\nimport { useHistory } from \"react-router-dom\";\n\nconst List = ({ category }) => {\n  let links = 0;\n  let prelist = [];\n\n  const getFiles = async () =>  {\n    const response = await fetch('files.json');\n    const files = await response.json()\n    prelist = getList(category, files);\n    links = prelist.length;\n    setList(prelist);\n  }\n\n  useEffect(getFiles, []);\n\n  const history = useHistory();\n  const getList = (category, files) => {\n    \n    switch (category) {\n      case 'pdf':\n        return files.pdf;\n      case 'vid':\n        return files.vid;\n      case 'fig':\n        return files.fig;\n      default:\n        return;\n    }\n  }\n\n  const [count, setCount] = useState(0);\n  const [list, setList] = useState([]);\n  \n  const nextItem = () => {\n    if (count < links - 1) setCount(count + 1);\n  }\n  \n  const prevItem = () => {\n    if (count > 0) setCount(count - 1);\n  }\n\n  const selectItem = () => {\n    document.querySelector('.selected-i').click();\n  }\n\n  const returnToMenu = () => {\n    history.push('/');\n  }\n\n  useKey(\"KeyA\", prevItem);\n  useKey(\"KeyD\", nextItem);\n  useKey(\"KeyP\", selectItem);\n  useKey(\"KeyO\", returnToMenu);\n\n  return (\n    <div className=\"list\">\n      {list.map(file => <ListItem \n        category={category}\n        selected={list.indexOf(file) === count}\n        file={file}\n        key={list.indexOf(file)}\n      />)}\n    </div>\n  );\n}\n\nexport default List;\n","/home/fx/Upwork/raspberry-kiosk/src/components/ListItem.jsx",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":10,"column":20,"nodeType":"55","endLine":16,"endColumn":4},{"ruleId":"53","severity":1,"message":"56","line":13,"column":15,"nodeType":"57","endLine":13,"endColumn":39},{"ruleId":"53","severity":1,"message":"58","line":14,"column":13,"nodeType":"59","endLine":14,"endColumn":27},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","Assignments to the 'prelist' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Assignments to the 'links' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","no-global-assign","no-unsafe-negation"]